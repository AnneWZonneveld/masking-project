"optimistic future",
"very happy",
"feel alone",
"happy love life" ), )
# Estimate network:
Network <- estimateNetwork(subData, default = "pcor", threshold="sig", alpha=0.05)
# Weights matrix:
weights <- round(Network$graph,2)
# Plot network (defaults to colorblind theme)
plot(Network, vsize = 15, layout = "circle")
print(Network)
library("psychonetrics")
library("dplyr")
model <- ggm(subData, estimator="FIML")
model <- model %>% runmodel
weights <- model %>% getmatrix("omega")
qgraph(weights, theme="colorblind")
CIplot(model, "omega")
covMat <- cov(subData, use = "pairwise.complete.obs")
round(covMat,2)
Kappa <- solve(covMat)
round(Kappa, 2)
manual_cor = - (Kappa[7,4])/(sqrt(Kappa[7,7])*sqrt(Kappa[4,4]))
manual_cor
knitr::opts_chunk$set(echo = TRUE)
true_network <- as.matrix(read.csv("PTSD_MAGNA.csv", row.names = 1))
true_edges <- true_network[lower.tri(true_network)]
true_network
true_edgese
true_edges
#Total number of possible edges
length(true_edges)
#Number of non-zero edges
sum(true_edges!=0)
library("bootnet")
simulator <- ggmGenerator()
#Simulate
simData <- simulate(500, true_network)
#Simulate
simData <- simulator(500, true_network)
est_net <- estimateNetwork(simData, default = "EBICglasso")
est_network <- estimateNetwork(simData, default = "EBICglasso")
est_edges <- est_network[lower.tri(true_network)]
est_network
est_edges
est_edges <- est_network[lower.tri(est_network)]
est_edges
plot(true_network)
plot(true_network, vsize = 15, layout = "circle"))
plot(true_network, vsize = 15, layout = "circle")
ggraph(true_network, vsize = 15, layout = "circle")
qgraph(true_network, vsize = 15, layout = "circle")
?qgraph
library("qgraph")
qgraph(true_network, vsize = 15, layout = "circle")
qgraph(true_network, vsize = 10, layout = "circle")
qgraph(true_network, vsize = 10, layout = "spring")
true_graph <- qgraph(true_network, vsize = 10, layout = "spring")
true_layout <-true_graph$layout
plot(est_network, layout = true_layout)
View(simData)
View(true_network)
true_graph$Arguments
true_graph$plotOptions
true_graph$graphAttributes
true_maximum <- true_graph$graphAttributes$Graph$maximum
treu_maximum
true_maximum
plot(est_network, layout = true_layout, maximum = true_maximum)
true_graph
plot(true_graph)
plot(est_network, layout = true_layout, maximum = true_maximum)
plot(true_graph)
plot(est_network, layout = true_layout, maximum = true_maximum, theme="colourblind")
plot(true_graph, theme="colorblind")
plot(est_network, layout = true_layout, maximum = true_maximum, theme="colorblind")
plot(true_graph, theme="colorblind")
plot(est_network, layout = true_layout, maximum = true_maximum, theme="colorblind")
plot(true_graph, theme="gray")
plot(true_graph, theme="colorblind", palette="colorblind")
true_network
plot(true_graph, theme="colorblind", palette="colorblind", nodeNames = c(
"intrusive thoughts",
"nightmares",
"flashbacks",
"psychological reactivity",
"physioloical reactivity",
"internal avoidane",
"external avoidance",
"amnesia",
"loss of interest",
"feeling detached",
"emotional numbing",
"irritability anger",
"hypervigilant",
"easily startled",
"difficulty concentrating",
"sleep disturbance",
"hopelessness"))
plot(true_graph, theme="colorblind", palette="colorblind", legend.mode="names", labels=T, nodeNames = c(
"intrusive thoughts",
"nightmares",
"flashbacks",
"psychological reactivity",
"physioloical reactivity",
"internal avoidane",
"external avoidance",
"amnesia",
"loss of interest",
"feeling detached",
"emotional numbing",
"irritability anger",
"hypervigilant",
"easily startled",
"difficulty concentrating",
"sleep disturbance",
"hopelessness"))
true_graph <- qgraph(true_network, vsize = 10, layout = "spring", theme="colorblind", palette="colorblind", legend.mode="names", labels=T, nodeNames = c(
"intrusive thoughts",
"nightmares",
"flashbacks",
"psychological reactivity",
"physioloical reactivity",
"internal avoidane",
"external avoidance",
"amnesia",
"loss of interest",
"feeling detached",
"emotional numbing",
"irritability anger",
"hypervigilant",
"easily startled",
"difficulty concentrating",
"sleep disturbance",
"hopelessness"))
plot(true_graph)
plot(est_network, layout = true_layout, maximum = true_maximum, theme="colorblind")
nodenames <- c("intrusive thoughts",
"nightmares",
"flashbacks",
"psychological reactivity",
"physioloical reactivity",
"internal avoidane",
"external avoidance",
"amnesia",
"loss of interest",
"feeling detached",
"emotional numbing",
"irritability anger",
"hypervigilant",
"easily startled",
"difficulty concentrating",
"sleep disturbance",
"hopelessness")
true_graph <- qgraph(true_network, vsize = 10, layout = "spring", theme="colorblind", palette="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
true_layout <-true_graph$layout
true_maximum <- true_graph$graphAttributes$Graph$maximum
plot(true_graph)
plot(est_network, layout = true_layout, maximum = true_maximum, theme="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
est_graph <- plot(est_network, layout = true_layout, maximum = true_maximum, theme="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
plot(est_graph)
# True graph
plot(true_graph, title="True graph")
# Sensitivity
sensitivity = sum(true_edges != 0 & est_edges !=0) / (sum(true_edges != 0 & est_edges != 0) + sum(true_edges != 0 & est_edges = 0))
# Sensitivity
sensitivity = sum(true_edges != 0 & est_edges !=0) / (sum(true_edges != 0 & est_edges != 0) + sum(true_edges != 0 & est_edges == 0))
# Sensitivity
sensitivity <- sum(true_edges != 0 & est_edges !=0) / (sum(true_edges != 0 & est_edges != 0) + sum(true_edges != 0 & est_edges == 0))
sum(true_edges != 0 & est_edges !=0)
sum(true_edges != 0 && est_edges !=0)
true_edges
true_edges != 0
sum(trure_edges != 0)
sum(true_edges != 0)
sum(est_edges != 0)
est_edges
est_edges <- est_network[lower.tri(est_network)]$data
true_graph <- qgraph(true_network, vsize = 10, layout = "spring", theme="colorblind", palette="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
true_layout <-true_graph$layout
true_maximum <- true_graph$graphAttributes$Graph$maximum
# True graph
plot(true_graph)
est_graph <- plot(est_network, layout = true_layout, maximum = true_maximum, theme="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
# Estimated graph
plot(est_graph)
# Sensitivity
sensitivity <- sum(true_edges != 0 && est_edges != 0) / (sum(true_edges != 0 & est_edges != 0) + sum(true_edges != 0 & est_edges == 0))
sensitivity
# Specificity
specifity <- sum(true_edges == 0 && est_edges == 0) / (sum(true_edges == 0 & est_edges == 0) + sum(true_edges == 0 & est_edges != 0))
# Specificity
specifity <- sum(true_edges == 0 & est_edges == 0) / (sum(true_edges == 0 & est_edges == 0) + sum(true_edges == 0 & est_edges != 0))
# Sensitivity
sensitivity <- sum(true_edges != 0 & est_edges != 0) / (sum(true_edges != 0 & est_edges != 0) + sum(true_edges != 0 & est_edges == 0))
sum(true_edges != 0 & est_edges != 0)
true_edges
est_edges
est_edges <- as.matrix(est_network[lower.tri(est_network)]$data)
# Sensitivity
sensitivity <- sum(true_edges != 0 & est_edges != 0) / (sum(true_edges != 0 & est_edges != 0) + sum(true_edges != 0 & est_edges == 0))
# Specificity
specifity <- sum(true_edges == 0 & est_edges == 0) / (sum(true_edges == 0 & est_edges == 0) + sum(true_edges == 0 & est_edges != 0))
# Specificity
specificity <- sum(true_edges == 0 & est_edges == 0) / (sum(true_edges == 0 & est_edges == 0) + sum(true_edges == 0 & est_edges != 0))
specificity
# Sensitivity
sensitivity <- sum(true_edges != 0 & est_edges != 0) / (sum(true_edges != 0 & est_edges != 0) + sum(true_edges != 0 & est_edges == 0))
sensitivity
true_edges == 0
est_network <- estimateNetwork(simData, default = "EBICglasso")
est_edges <- as.matrix(est_network[lower.tri(est_network)]$data)
nodenames <- c("intrusive thoughts",
"nightmares",
"flashbacks",
"psychological reactivity",
"physioloical reactivity",
"internal avoidane",
"external avoidance",
"amnesia",
"loss of interest",
"feeling detached",
"emotional numbing",
"irritability anger",
"hypervigilant",
"easily startled",
"difficulty concentrating",
"sleep disturbance",
"hopelessness")
true_graph <- qgraph(true_network, vsize = 10, layout = "spring", theme="colorblind", palette="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
true_layout <-true_graph$layout
true_maximum <- true_graph$graphAttributes$Graph$maximum
# True graph
plot(true_graph)
est_graph <- plot(est_network, layout = true_layout, maximum = true_maximum, theme="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
# Estimated graph
plot(est_graph)
# Sensitivity
sensitivity <- sum(true_edges != 0 & est_edges != 0) / (sum(true_edges != 0 & est_edges != 0) + sum(true_edges != 0 & est_edges == 0))
sensitivity
# Specificity
specificity <- sum(true_edges == 0 & est_edges == 0) / (sum(true_edges == 0 & est_edges == 0) + sum(true_edges == 0 & est_edges != 0))
specificity
true_edges == 0]
true_edges == 0
est_edges == 0
est_edges <- est_network[lower.tri(est_network)]$data
est_network <- estimateNetwork(simData, default = "EBICglasso")
est_edges <- est_network[lower.tri(est_network)]$data
nodenames <- c("intrusive thoughts",
"nightmares",
"flashbacks",
"psychological reactivity",
"physioloical reactivity",
"internal avoidane",
"external avoidance",
"amnesia",
"loss of interest",
"feeling detached",
"emotional numbing",
"irritability anger",
"hypervigilant",
"easily startled",
"difficulty concentrating",
"sleep disturbance",
"hopelessness")
true_graph <- qgraph(true_network, vsize = 10, layout = "spring", theme="colorblind", palette="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
true_layout <-true_graph$layout
true_maximum <- true_graph$graphAttributes$Graph$maximum
# True graph
plot(true_graph)
est_graph <- plot(est_network, layout = true_layout, maximum = true_maximum, theme="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
# Estimated graph
plot(est_graph)
est_edges
len(est_edges)
length(est_edges)
est_network
est_edges <- est_network[lower.tri(est_network)]
nodenames <- c("intrusive thoughts",
"nightmares",
"flashbacks",
"psychological reactivity",
"physioloical reactivity",
"internal avoidane",
"external avoidance",
"amnesia",
"loss of interest",
"feeling detached",
"emotional numbing",
"irritability anger",
"hypervigilant",
"easily startled",
"difficulty concentrating",
"sleep disturbance",
"hopelessness")
true_graph <- qgraph(true_network, vsize = 10, layout = "spring", theme="colorblind", palette="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
true_graph <- qgraph(true_network, vsize = 10, layout = "spring", theme="colorblind", palette="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
true_layout <-true_graph$layout
true_layout <-true_graph$layout
true_maximum <- true_graph$graphAttributes$Graph$maximum
# True graph
plot(true_graph)
true_graph <- qgraph(true_network, vsize = 10, layout = "spring", theme="colorblind", palette="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
true_layout <-true_graph$layout
true_maximum <- true_graph$graphAttributes$Graph$maximum
# True graph
plot(true_graph)
est_graph <- plot(est_network, layout = true_layout, maximum = true_maximum, theme="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
# Estimated graph
plot(est_graph)
# Sensitivity
sensitivity <- sum(true_edges != 0 & est_edges != 0) / (sum(true_edges != 0 & est_edges != 0) + sum(true_edges != 0 & est_edges == 0))
est_edges
true_edges
est_edges <- est_network[lower.tri(est_network)]
est_edges
est_network
est_network$weighted
est_network$graph
est_edges <- est_networ$graph[lower.tri(est_network$graph)]
est_edges <- est_network$graph[lower.tri(est_network$graph)]
est_edges
true_graph <- qgraph(true_network, vsize = 10, layout = "spring", theme="colorblind", palette="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
true_layout <-true_graph$layout
true_maximum <- true_graph$graphAttributes$Graph$maximum
# True graph
plot(true_graph)
# True graph
plot(true_graph)
est_graph <- plot(est_network, layout = true_layout, maximum = true_maximum, theme="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
est_graph <- plot(est_network, layout = true_layout, maximum = true_maximum, theme="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
# Estimated graph
plot(est_graph)
# Sensitivity
sensitivity <- sum(true_edges != 0 & est_edges != 0) / (sum(true_edges != 0 & est_edges != 0) + sum(true_edges != 0 & est_edges == 0))
sensitivity
# Specificity
specificity <- sum(true_edges == 0 & est_edges == 0) / (sum(true_edges == 0 & est_edges == 0) + sum(true_edges == 0 & est_edges != 0))
specificity
bootstrap <- bootnet(est_network, nBoots=300)
plot(bootstrap, order="sample")
plot(bootstrap, order="sample", labels = F)
bootstrap2 <- bootnet(est_network, nBoots=300, type="case")
plot(bootstrap2)
corStability(bootstrap2)
plot(bootstrap1, "strength", order="sample")
bootstrap1 <- bootnet(est_network, nBoots=300)
plot(bootstrap1, "strength", order="sample")
plot(bootstrap1, "strength", olot = "difference", order="sample")
plot(bootstrap1, order="sample", labels = F, plot="interval", split0=TRUE)
plot(bootstrap1, order="sample", labels = F, split0=TRUE)
plot(bootstrap1, "strength", plot = "difference", order="sample")
Centrality differences:
```{r, echo=TRUE}
plot(bootstrap1, "strength", plot = "difference", order="sample")
```
**Question 8**
simData2 <- simulator(500, true_network)
library("NetworkComparisonTest")
?ICT
?NCT
resNCT <- NCT(bootstrap1, bootstrap2, test.edges=TRUE, edges = "all", p.adjust.methods = "none")
resNCT <- NCT(bootstrap1, bootstrap2, it=100, test.edges=TRUE, edges = "all", p.adjust.methods = "none")
bootstrap1
bootstrap1$sampleTable
bootstrap1$bootTable
bootstrap1$boots
bootstrap1$type
resNCT <- NCT(bootstrap1$bootTable, bootstrap2$bootTable, it=100, test.edges=TRUE, edges = "all", p.adjust.methods = "none")
simData2 <- simulator(500, true_network)
est_network2 <- estimateNetwork(simData2, default = "EBICglasso")
resNCT <- NCT(est_network, est_network2, it=100, test.edges=TRUE, edges = "all", p.adjust.methods = "none")
resNCT$glstrinv.pval
resNCT$glstrinv.real
resNCT$glstrinv.pval
resNCT$nwinv.real
resNCT$nwinv.pval
resNCT$einv.pvals[which(resNCT$einv.pvals[,3]<=.0500),]
library("qgraph")
true_network <- as.matrix(read.csv("PTSD_MAGNA.csv", row.names = 1))
true_edges <- true_network[lower.tri(true_network)]
#Total number of possible edges
length(true_edges)
#Number of non-zero edges
sum(true_edges!=0)
library("bootnet")
library("qgraph")
simulator <- ggmGenerator()
#Simulate
simData <- simulator(500, true_network)
est_network <- estimateNetwork(simData, default = "EBICglasso")
est_edges <- est_network$graph[lower.tri(est_network$graph)]
est_network
est_network$graph
est_network <- estimateNetwork(simData, default = "EBICglasso")$graph
est_edges <- est_network[lower.tri(est_network)]
nodenames <- c("intrusive thoughts",
"nightmares",
"flashbacks",
"psychological reactivity",
"physioloical reactivity",
"internal avoidane",
"external avoidance",
"amnesia",
"loss of interest",
"feeling detached",
"emotional numbing",
"irritability anger",
"hypervigilant",
"easily startled",
"difficulty concentrating",
"sleep disturbance",
"hopelessness")
true_graph <- qgraph(true_network, vsize = 10, layout = "spring", theme="colorblind", palette="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
true_layout <-true_graph$layout
true_maximum <- true_graph$graphAttributes$Graph$maximum
# True graph
plot(true_graph)
true_graph <- qgraph(true_network, vsize = 10, layout = "spring", theme="colorblind", palette="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
est_graph <- plot(est_network, layout = true_layout, maximum = true_maximum, theme="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
est_graph <- qgraph(est_network, layout = true_layout, maximum = true_maximum, theme="colorblind", legend.mode="names", labels=T, nodeNames = nodenames)
# Sensitivity
sensitivity <- sum(true_edges != 0 & est_edges != 0) / (sum(true_edges != 0 & est_edges != 0) + sum(true_edges != 0 & est_edges == 0))
sensitivity
# Specificity
specificity <- sum(true_edges == 0 & est_edges == 0) / (sum(true_edges == 0 & est_edges == 0) + sum(true_edges == 0 & est_edges != 0))
specificity
?cor
#Edge weight correlation
cor(true_network, est_network)
bootstrap2 <- bootnet(est_network, nBoots=300, type="case")
plot(bootstrap2)
corStability(bootstrap2)
plot(bootstrap2)
est_network2 <- estimateNetwork(simData2, default = "EBICglasso")
resNCT <- NCT(est_network, est_network2, it=100, test.edges=TRUE, edges = "all", p.adjust.methods = "none")
?NCT
est_network
as.matrix(est_network)
est_network2
resNCT <- NCT(est_network, est_network2$graph, it=100, test.edges=TRUE, edges = "all", p.adjust.methods = "none")
resNCT$glstrinv.pval
resNCT$glstrinv.real
simData2 <- simulator(500, true_network)
est_network2 <- estimateNetwork(simData2, default = "EBICglasso")$graph
resNCT <- NCT(est_network, est_network2, it=100, test.edges=TRUE, edges = "all", p.adjust.methods = "none")
resNCT$glstrinv.pval
resNCT$glstrinv.real
resNCT$nwinv.real
resNCT$nwinv.pval
#Edge weight correlation?
cor(true_network, est_network)
#Edge weight correlation?
cor(c(true_network), c(est_network))
plot(bootstrap1, order="sample", labels = F)
plot(est_network, statistic = "strength")
plot(est_network, statistics = "strength")
plot(est_network, "strength")
qgraph(est_network, "strength")
est_network_model <- estimateNetwork(simData, default = "EBICglasso")
est_network <- est_network_model$graph
plot(est_network_model, statistics="strength")
centralityPlot(est_network_model, include="strength")
?centralityPlot
centralityPlot(est_network_model)
bootstrap2 <- bootnet(est_network, nBoots=300, type="case")
plot(bootstrap2)
bootstrap2 <- bootnet(est_network_model, nBoots=300, type="case")
plot(bootstrap2)
corStability(bootstrap2)
plot(bootstrap1, "strength", plot = "difference", order="sample")
est_network2 <- estimateNetwork(simData2, default = "EBICglasso")$graph
resNCT <- NCT(est_network, est_network2, it=100, test.edges=TRUE, edges = "all", p.adjust.methods = "none")
resNCT$glstrinv.pval
resNCT <- NCT(est_network_model, est_network2, it=100, test.edges=TRUE, edges = "all", p.adjust.methods = "none")
est_network2 <- estimateNetwork(simData2, default = "EBICglasso")
resNCT <- NCT(est_network_model, est_network2, it=100, test.edges=TRUE, edges = "all", p.adjust.methods = "none")
resNCT$glstrinv.pval
resNCT$glstrinv.real
resNCT$glstrinv.pval
resNCT$glstrinv.real
resNCT$nwinv.real
resNCT$nwinv.pval
resNCT$nwinv.real
resNCT$nwinv.pval
resNCT$einv.pvals[which(resNCT$einv.pvals[,3]<=.0500),]
resNCT$nwinv.real
resNCT$nwinv.pval
resNCT$glstrinv.real
resNCT$glstrinv.pval
resNCT$glstrinv.pval
resNCT$glstrinv.real
resNCT
setwd("~/Documents/STAGE/task/data")
things_concept <- read.table("things_concepts.tsv", header = T, sep="\t", fill=T)
image_paths <- read.table("image_paths.csv", sep=",")
categories = c("vegetable", "fruit", "drink", "insect", "bird",
"clothing", "musical instrument", "body part", "plant", "vehicle")
df = data.frame()
category = "fruit"
concepts = things_concept$uniqueID[things_concept$Top.down.Category..manual.selection. == category]
concepts
category
category = "animal"
concepts = things_concept$uniqueID[grepl(category, things_concept$Top.down.Category..manual.selection., fixed = TRUE)]
concepts
concept = "octopus"
paths = image_paths$V1[grepl(concept, image_paths$V1, fixed = TRUE)]
paths
sub_df = data.frame()
sub_df$path = paths
